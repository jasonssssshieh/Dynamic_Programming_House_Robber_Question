/*The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.
Determine the maximum amount of money the thief can rob tonight without alerting the police.*/
//we could also solve this by two cases: contain root and not contain root;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
int rob(TreeNode* root){
    vector<int> res = robSub(root);
    return max(res[0], res[1]);
}

vector<int> robSub(TreeNode* root){
    if(root == nullptr){
        return vector<int>(2,0);
    }
    
    vector<int> left = robSub(root->left);
    vector<int> right = robSub(root->right);
    vector<int> res(2,0);
    res[0] = max(left[0],left[1]) + max(right[0], right[1]);
    return res;
}
